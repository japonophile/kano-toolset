#!/usr/bin/python

# kano-shutdown
#
# Copyright (C) 2014, 2015 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# Python script to display a Desktop shutdown dialog to turn off, reboot or logoff.
# The user executing this code needs sudo NOPASSWD: privileges for
# /sbin/poweroff, reboot, and loginctl.
#


from gi.repository import Gtk, Gdk

from kano.gtk3.buttons import KanoButton
from kano.gtk3.application_window import ApplicationWindow
from kano.gtk3.apply_styles import apply_styling_to_screen

from kano.paths import common_css_dir
from kano.utils import run_cmd, run_bg

import os

# The steps needed before showing the dialog are a bit time consuming
# so we raise the hourglass as soon as possible
from kdesk.hourglass import hourglass_start, hourglass_end
hourglass_start('kano-shutdown')


class ShutdownOptions(ApplicationWindow):
    """
    Displays a dialog with logout, poweroff and reboot buttons
    """
    def __init__(self, title='', width=300, height=550):

        self.top_image_file = '/usr/share/kano-desktop/images/kano-logout-face.png'

        # Load and apply styles
        apply_styling_to_screen(common_css_dir + "/shutdown.css")

        # Setup the window
        ApplicationWindow.__init__(self, title, width, height)
        self.set_default_size(width, height)
        self.set_decorated(False)

        # Keep dialog always on top, and remove the taskbar icon
        # Clicking anywhere outside the dialog keeps app focused.
        self.set_keep_above(True)
        self.set_skip_taskbar_hint(True)

        # Create ad eventbox that has all the action buttons and image
        background = Gtk.EventBox()

        # Top image widget, a separator and a title
        self.top_image = Gtk.Image.new_from_file(self.top_image_file)
        self.separator = Gtk.HSeparator()
        self.actions_title = Gtk.Label('Do you want to Logout?')
        self.actions_title.get_style_context().add_class('shutdown_title')

        # All the action buttons
        self.btn_shutdown = KanoButton('Shutdown')
        self.btn_shutdown.connect('button-press-event', self._on_shutdown)

        self.btn_reboot = KanoButton('Reboot')
        self.btn_reboot.connect('button-press-event', self._on_reboot)

        self.btn_logout = KanoButton('Logout')
        self.btn_logout.connect('button-press-event', self._on_logout)

        self.btn_cancel = KanoButton('Cancel')
        self.btn_cancel.connect('button-press-event', self._on_cancel)

        # The ESC key will terminate the app
        self.connect('key-press-event', self._on_key_press)

        # A vertical box where all widgets will sit
        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        vbox.set_margin_top(30)
        vbox.set_margin_left(20)
        vbox.set_margin_right(20)
        vbox.set_margin_bottom(30)
        vbox.set_spacing(30)
        vbox.expand = True

        # insert information widgets
        vbox.pack_start(self.top_image, False, False, 0)
        vbox.pack_start(self.separator, False, False, 0)
        vbox.pack_start(self.actions_title, False, False, 0)

        # insert buttons from bottom to top to align correctly
        vbox.pack_end(self.btn_cancel, False, False, 1)
        vbox.pack_end(self.btn_logout, False, False, 1)
        vbox.pack_end(self.btn_reboot, False, False, 1)
        vbox.pack_end(self.btn_shutdown, False, False, 1)

        # put it all together inside the window
        vbox.get_style_context()
        background.add(vbox)
        self.set_main_widget(background)
        self.show_all()

    def _on_shutdown(self, button=None, event=None):
        # run the updater to install urgent or prompt for updating now
        hourglass_start('kano-updater')
        run_cmd('sudo kano-updater ui shutdown-window')
        run_bg('sudo systemctl poweroff')

    def _on_reboot(self, button=None, event=None):
        run_bg('sudo systemctl reboot')

    def _on_logout(self, button=None, event=None):
        # Disregard Computer Mode, so this user next login brings him to the Dashboard
        dashboard_xsession_file=os.path.join(os.path.expanduser('~'), '.xsessionrc')
        if os.path.isfile(dashboard_xsession_file):
            os.unlink(dashboard_xsession_file)

        # Kill the user desktop session manager and everything below it
        run_bg('pkill lxsession')

    def _on_cancel(self, button=None, event=None):
        # If Cancel button or otherwise, terminate the app
        Gtk.main_quit()

    def _on_key_press(self, window=None, event=None):
        """
        The ESC key will also dismiss any action and return to Desktop
        And the Enter key will press the button with the current focus.
        """
        if event and event.get_keyval()[1] == Gdk.KEY_Return:
            # If the Enter key is pressed, send a click event
            # to the button that has the input focus.
            the_button=window.get_focus()
            e = Gdk.Event()
            e.window = self.get_root_window()
            e.send_event = True
            the_button.emit('button-press-event', e)
            return

        if event and event.get_keyval()[1] == Gdk.KEY_Escape:
            Gtk.main_quit()


if __name__ == '__main__':
    try:
        # Report to Kano Tracker, and kano-sync
        # asynchronously for faster UI response time
        run_bg('kano-tracker-ctl +1 shutdown')
        run_bg('kano-sync --backup -s &')
        run_bg('sudo /usr/bin/expand-rootfs')

        # Show up to the dialog
        win = ShutdownOptions()
        win.show_all()

        # Stop the hourglass right before showing the dialog
        hourglass_end()

        Gtk.main()

    except:
        # something went wrong, stop the hourglass and raise exception
        hourglass_end()
        raise
